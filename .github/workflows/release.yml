name: Tauri Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    strategy:
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Rust
        if: matrix.platform == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          targets: x86_64-apple-darwin, aarch64-apple-darwin

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install Dependencies
        run: npm ci

      - name: Install platform dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y universe
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Build Tauri App
        if: matrix.platform == 'macos-latest'
        run: npx tauri build --target universal-apple-darwin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Tauri App
        if: matrix.platform != 'macos-latest'
        run: npx tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List DMG files
        if: matrix.platform == 'macos-latest'
        run: |
          ls -la src-tauri/target/universal-apple-darwin/release/bundle/dmg
          pwd

      - name: Get DMG filename
        if: matrix.platform == 'macos-latest'
        id: dmg
        run: |
          DMG_FILE=$(ls src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg)
          echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV

      # Upload platform-specific release assets
      - name: Upload macOS asset
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.DMG_FILE }}
          asset_name: ssh-book-macos-universal-${{ github.ref_name }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: List Linux files
        if: matrix.platform == 'ubuntu-latest'
        run: |
          ls -la src-tauri/target/release/bundle/appimage/
          ls -la src-tauri/target/release/bundle/deb/
          ls -la src-tauri/target/release/bundle/rpm/
          pwd

      - name: Get Linux filenames
        if: matrix.platform == 'ubuntu-latest'
        id: linux
        run: |
          APPIMAGE_FILE=$(ls src-tauri/target/release/bundle/appimage/*.AppImage)
          DEB_FILE=$(ls src-tauri/target/release/bundle/deb/*.deb)
          RPM_FILE=$(ls src-tauri/target/release/bundle/rpm/*.rpm)
          echo "APPIMAGE_FILE=$APPIMAGE_FILE" >> $GITHUB_ENV
          echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV
          echo "RPM_FILE=$RPM_FILE" >> $GITHUB_ENV

      - name: Upload Linux AppImage
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.APPIMAGE_FILE }}
          asset_name: ssh-book-linux-${{ github.ref_name }}.AppImage
          asset_content_type: application/x-appimage

      - name: Upload Linux DEB
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.DEB_FILE }}
          asset_name: ssh-book-linux-${{ github.ref_name }}.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux RPM
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.RPM_FILE }}
          asset_name: ssh-book-linux-${{ github.ref_name }}.rpm
          asset_content_type: application/x-rpm

#      - name: List Windows files
#        if: matrix.platform == 'windows-latest'
#        run: |
#          dir /s /b src-tauri\target\release\bundle\msi\*.msi
#          dir /s /b src-tauri\target\release\bundle\nsis\*.exe
#          dir /s /b src-tauri\target\release\bundle\*.msi
#          dir /s /b src-tauri\target\release\bundle\*.exe

      - name: Get Windows filenames
        if: matrix.platform == 'windows-latest'
        shell: cmd
        run: |
          for /f "tokens=*" %%a in ('dir /s /b src-tauri\target\release\bundle\*.msi') do set MSI_FILE=%%a
          for /f "tokens=*" %%a in ('dir /s /b src-tauri\target\release\bundle\*.exe') do set NSIS_FILE=%%a
          echo MSI_FILE=%MSI_FILE%>>%GITHUB_ENV%
          echo NSIS_FILE=%NSIS_FILE%>>%GITHUB_ENV%


      - name: Upload Windows MSI
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.MSI_FILE }}
          asset_name: ssh-book-windows-${{ github.ref_name }}.msi
          asset_content_type: application/x-msi

      - name: Upload Windows NSIS
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.NSIS_FILE }}
          asset_name: ssh-book-windows-${{ github.ref_name }}-setup.exe
          asset_content_type: application/x-msdownload
